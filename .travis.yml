dist: bionic
language: python
python: "3.10"
cache:
  directories:
    - $HOME/.cache/pip
    - $HOME/.cache/pre-commit
services:
  - docker
env:
  global:
    - CONTAINER: web
    - APPLICATION_NAME: aurora
    - APPLICATION_PORT: 80
    - TRAVIS_CI: true
before_install:
  - cp ${APPLICATION_NAME}/config.py.example ${APPLICATION_NAME}/config.py
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker-compose -f docker-compose.travis.yml up -d
install:
  - pip install pre-commit && pre-commit install
  - ./wait-for-it.sh ${CONTAINER}:${APPLICATION_PORT} -- docker-compose exec $CONTAINER pip install coverage
script:
  - pre-commit run --all-files --show-diff-on-failure
  - docker-compose exec ${CONTAINER} coverage run --omit=aurora/bag_transfer/migrations manage.py test
  - docker-compose exec ${CONTAINER} coverage report --omit=*/migrations/* -m
before_deploy:
  - if [ ! -d deploy_scripts ]; then git clone https://github.com/RockefellerArchiveCenter/deploy_scripts.git; fi
  - sudo deploy_scripts/substitute_env.sh
  - sudo deploy_scripts/make_zip_django.sh $DEPLOY_ZIP_DIR $DEPLOY_ZIP_NAME
deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
    local_dir: $DEPLOY_ZIP_DIR
    skip_cleanup: true
    on:
      repo: RockefellerArchiveCenter/${APPLICATION_NAME}
      all_branches: true
      condition: $TRAVIS_BRANCH =~ ^(base|development)$
    bucket: $AWS_BUCKET_NAME
    region: us-east-1
  - provider: codedeploy
    bucket: $AWS_BUCKET_NAME
    key: $DEPLOY_ZIP_NAME
    bundle_type: zip
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY
    application: ${APPLICATION_NAME}
    deployment_group: ${DEPLOYMENT_GROUP}
    region: us-east-1
    on:
      repo: RockefellerArchiveCenter/${APPLICATION_NAME}
      all_branches: true
      condition: $TRAVIS_BRANCH =~ ^(base|development)$
notifications:
  email: false
