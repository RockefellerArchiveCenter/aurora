# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-04-25 14:45
from __future__ import unicode_literals

from django.db import migrations


def create_baglogs(apps, schema_editor):
    codes_to_add = (
        ('BACC', 'I', "Transfer accessioned", "Transfer sent to archival storage"),
        ('BREJ', 'I', "Transfer rejected by appraisal archivist", "Transfer deleted"),
        ('BACPT', 'I', "Transfer accepted by appraisal archivist", "Transfer staged for accessioning"),
        ('FSERR', 'BR', "Transfer is too large", "Transfer deleted"),
        ('VIRUS', 'BR', "Virus found in transfer", "Transfer deleted, system administrators notified"),
        ('VCONN', 'GE', "Could not connect to virus scanner", None),
        ('DTERR', 'BE', "Transfer didn't pass datatype specs", "Transfer deleted"),
        ('MDERR', 'BE', "Optional metadata file is present but is not valid json", "Transfer deleted"),
        ('BIERR', 'BE', "Error saving bag-info metadata", None),
        ('RSERR', 'BE', "Could not assign rights to transfer", None),
        ('PBAGP', 'S', "Transfer passed BagIt Profile and datatype validation", "Transfer staged for appraisal"),
        ('PBAG', 'S', "Transfer passed BagIt validation", "Transfer staged for BagIt Profile validation"),
        ('RBERR', 'BE', "Transfer failed BagIt Profile validation", "Transfer deleted"),
        ('GBERR', 'BE', "Transfer failed BagIt validation", "Transfer deleted"),
        ('EXERR', 'BE', "Problem extracting serialized transfer", "Transfer deleted"),
        ('BDIR', 'BE', "Unrecognized transfer type", "Transfer deleted"),
        ('BZIP2', 'BE', "ZIP file has more than one top level directory", "Transfer deleted"),
        ('BZIP', 'BE', "Invalid ZIP file", "Transfer deleted"),
        ('BTAR2', 'BE', "TAR file has more than one top level directory", "Transfer deleted"),
        ('BTAR', 'BE', "Invalid TAR file", "Transfer deleted"),
        ('BFNM', 'BE', "Tranfer has invalid filename", "Transfer deleted"),
        ('NORG', 'GE', "No organization", None),
        ('DEXT', 'GE', "File does not exist anymore", None),
        ('APASS', 'S', "Transfer passed all validation", "Transfer staged for appraisal"),
        ('ASAVE', 'S', "Transfer saved", "Transfer staged for BagIt validation"),
        ('CEND', 'I', "Cron job ended", None),
        ('CSTR', 'I', "Cron job started", None),
    )

    BAGLogCodes = apps.get_model('bag_transfer', 'BAGLogCodes')

    for code in codes_to_add:
        if not BAGLogCodes.objects.filter(code_short=code[0]).exists():
            bag_log_code = BAGLogCodes(
                code_short=code[0],
                code_type=code[1],
                code_desc=code[2],
                next_action=code[3],
            )
            bag_log_code.save()


def delete_baglogs(apps, schema_editor):
    BAGLogCodes = apps.get_model('bag_transfer', 'BAGLogCodes')
    for code in BAGLogCodes.objects.all():
        code.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('bag_transfer', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_baglogs, delete_baglogs),
    ]
