# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2019-01-15 02:03
from __future__ import division, unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('bag_transfer', '0021_dashboardmonthdata_dashboardrecordtypedata'),
    ]

    def add_month_data(apps, schema_editor):
        DashboardMonthData = apps.get_model('bag_transfer', 'DashboardMonthData')
        Archives = apps.get_model('bag_transfer', 'Archives')
        for archive in Archives.objects.all():
            data = DashboardMonthData.objects.get_or_create(
                month_label=archive.machine_file_upload_time.strftime("%B"),
                sort_date=int(str(archive.machine_file_upload_time.year) + str(archive.machine_file_upload_time.month)),
                year=archive.machine_file_upload_time.year,
                organization=archive.organization
            )[0]
            data.upload_count += 1
            data.upload_size += int(archive.machine_file_size) / 1000000000
            data.save()

    def remove_month_data(apps, schema_editor):
        DashboardMonthData = apps.get_model('bag_transfer', 'DashboardMonthData')
        for data in DashboardMonthData.objects.all():
            data.delete()

    def add_record_type_data(apps, schema_editor):
        DashboardRecordTypeData = apps.get_model('bag_transfer', 'DashboardRecordTypeData')
        Archives = apps.get_model('bag_transfer', 'Archives')
        BagInfoMetadata = apps.get_model('bag_transfer', 'BagInfoMetadata')
        for archive in Archives.objects.all():
            if archive.process_status >= 40:
                metadata = BagInfoMetadata.objects.filter(archive=archive.pk).first()
                data = DashboardRecordTypeData.objects.get_or_create(
                    organization=archive.organization,
                    label=metadata.record_type
                )[0]
                data.count += 1
                data.save()

    def remove_record_type_data(apps, schema_editor):
        DashboardRecordTypeData = apps.get_model('bag_transfer', 'DashboardRecordTypeData')
        for data in DashboardRecordTypeData.objects.all():
            data.delete()

    operations = [
        migrations.RunPython(add_month_data, remove_month_data),
        migrations.RunPython(add_record_type_data, remove_record_type_data),
    ]
