#! /bin/bash
#
#  RACaddorg - Rockefeller Archive Center  Add Organization script
#
#  Create a new organization for sftp users accessing the system on port 12060.
#
#  1) Create the "Group" orgx
#  2) Create the Directories for the new org
#          /data/orgx
#          /data/orgx/upload
#  3) Set ownership and permissions for new directories
#  4) Update /etc/ssh2/sshd_config with new org and chown directory
#
#
#  Logging:  Output and error messages are placed in the the system log.
#                  tail -f /var/log/messages to view output in real time
#
#
#  To run in DEBUG mode, set debug=1
#
#
# ---------------------- Return Codes -------------------------
#             1 - General Fail - Operation not completed.
#             2 - No input parameters, Must have at least at least one arguments to run
#             3 - The group already exits.
#             4 - Unable to create Directory
#             8 - Directory or Object exists
#

#
#  $Id: RACaddorg,v 1.00 8/02/2017 URDB dI$
#
# Modified by DKB - 8/4/2017 Check to make sure the group exists before creating the directory.
#
#
# Todo:  Need support to pass in the orgname and return values.

#  To force this to run, set FORCE_RUN to 1 or delete $CFG and rerun

# Write a message to syslog and stderr, depending on the verboseness level
# Arguments are LEVEL MESSAGE; LEVEL is either "err" or "info".
log ()
{

  if [ $# -le 1 ]; then
    echo "RACaddorg: Must have at least two arguments to log()" 1>&2
    return 1
  fi

  FACILITY="$1"
  shift
  case "$FACILITY" in
    err|info|debug) : ;;
    *)  echo "RACaddOrg: I do not recognize level '$FACILITY' " 1>&2 ;;
  esac
      logger "RACaddorg: $FACILITY:  $@"
}



#-------------------------------------------------MAIN---------------------------------------
#
#  Set some variabilities
#
log info "RACaddorg started at $(date)"
#
# set to 1 to turn on Debugging
#
debug=0
FORCE_RUN=0
INTERACTIVE_MODE=0
PROGNAME="$0"
ROOT=/          # Write files relative to this directory
MATCH_GROUP=
CHROOT_DIR=
X11='no'
ALLOW_TCP_FORWARD='no'
FORCE_COMMAND='internal-sftp'

if [ $# -eq 0 ]; then
   log err "Error, No input argument supplied, terminating"
   exit 2
else
   if [ $1 = "manual" ]; then
      INTERACTIVE_MODE=1
      log info "Running in Interactive Mode"
   fi
fi

#
#  -u  Treat unset variables as an error when substituting.
#
set -u

#
# Check if running in INTERACTIVE_MODE.
#
if [ $INTERACTIVE_MODE = '1' ]; then
   echo "Running in Interactive Mode"
   read -p "Create new Organization [y/n]? " -n 1 -r
   if [[ ! $REPLY =~ ^[Yy]$ ]]
   then
       echo "Nothing to do, Exiting"
       exit 1  #nothing to do - get out.
   fi
   echo
   echo "Enter the machine name of the Organization"
   read nextorg
   echo
else
   nextorg=$@
fi

#
# Before we do anything,  lets make sure the group $nextorg does not exit.
#
if grep -a $nextorg /etc/group; then
   log err  "Unable to create organization, group $nextorg exists"
   exit 3
fi

#
#   Create the group for the new org
#
#   groupadd grpname
#
groupadd $nextorg
if [ $? -ne 0 ]; then
   log err  "Unable to create Group: $nextorg, termining."
   exit 1
fi
log info "Group: $nextorg created."


#Create the directory for the organization and a upload directory within.
newdir='/data/'$nextorg
uploaddir=$newdir'/upload'
if [ ! -d $newdir ]; then
   if mkdir -p  "$newdir" ; then
      log info "Directory $newdir created."
   else
      log err "Unable to create directory $newdir, exiting"
      exit 4
   fi
fi

if [ ! -d $uploaddir ]; then
   if mkdir -p  "$uploaddir" ; then
      log info "Directory $uploaddir created."
   else
      log err "Unable to create directory $uploaddir, exiting"
      exit 4
   fi
fi

chown root:$nextorg $uploaddir
if [ $? -ne 0 ]; then
   log err "Unable to  chmod Directory $uploaddir, termining."
   exit 8
fi

chmod 770 $uploaddir
if [ $? -ne 0 ]; then
   log err  "Unable to  chown Directory $uploaddir, termining."
   exit 8
fi

log info "Directory $newdir and $uploaddir have been created."

####################################################################################
README=$newdir'/README'

#create the README file in the new directory
if [ ! -e $README ] ; then
   echo "README"  > "$README"
   echo "This is a System generated file, DO NOT ERASE"   >> "$README"
   echo "ORGANIZATION GROUP: $nextorg"                    >> "$README"
   echo " "                                               >> "$README"
   echo "This directory is write protected."              >> "$README"
   echo "New files should be uploaded to $newdir/upload"  >> "$README"
fi

#
#Append the New Org information to /etc/ssh2/sshd_config
#
sshdfile='/etc/ssh2/sshd_config'
if [  -e $sshdfile ] ; then
   echo
   echo "  "                                                                       >> "$sshdfile"
   echo "# This section was created with the addorg script. Please DO NOT ERASE"   >> "$sshdfile"
   echo "# The addorg script is located in /usr/local/bin/addorg."                 >> "$sshdfile"
   echo "# This is for group: $nextorg. "                                          >> "$sshdfile"
   echo                                                                            >> "$sshdfile"
   echo "Match group $nextorg"                                                     >> "$sshdfile"
   echo "      ChrootDirectory  $newdir"                                           >> "$sshdfile"
   echo "      X11Forwarding no "                                                  >> "$sshdfile"
   echo "      AllowTcpForwarding no "                                             >> "$sshdfile"
   echo "      ForceCommand internal-sftp "                                        >> "$sshdfile"
   echo                                                                            >> "$sshdfile"
   echo                                                                            >> "$sshdfile"
else
   log err "File $sshdfile does not exist, contact system support. Terminating."
fi
log info "Updated the sshd config file with new organization: $nextorg"

#
# Print Summary
#
#
log info "System updates complete for new organization: $nextorg, using directory $uploaddir."
systemctl restart sshd2.service

log info "Operations Complete"
exit 0
##########################################################################################################################
